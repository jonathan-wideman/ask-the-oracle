{"version":3,"sources":["store/Store.ts","store/data/OraclesIndex.tsx","components/header/Header.tsx","components/home/Home.tsx","utils/misc/misc.ts","modules/dice/dice.ts","components/oracle/utils/roll-table.ts","components/oracle/Oracle.tsx","components/oracle-list/OracleList.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Store","oracles","Header","props","name","defaultProps","Home","toTitleCase","s","toLowerCase","replace","match","toLocaleUpperCase","title","slice","lastIndexOf","trim","Dice","roll","sides","min","max","Math","round","random","checkRange","range","rangeMin","rangeMax","pop","undefined","Error","parseInt","oracleMax","oracle","table","length","RollTableUtils","rollResult","value","find","item","result","Oracle","state","bind","this","setState","className","onClick","MiscUtils","React","OracleList","count","items","map","countBy","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f9bec97.chunk.js","sourcesContent":["import oracles from \"./data/OraclesIndex\";\r\n\r\n\r\nexport interface IStore {\r\n  oracles: IOracle[];\r\n}\r\n\r\nexport interface IOracle {\r\n  title: string;\r\n  table: IRollTableLineItem[];\r\n}\r\n\r\nexport interface IRollTableLineItem {\r\n  roll: string,\r\n  result: string\r\n}\r\n\r\nconst Store: IStore = {\r\n  oracles: oracles\r\n}\r\n\r\nexport default Store;","import action from './Oracle Data/action.oracle.json'\r\nimport challenge_rank from './Oracle Data/challenge-rank.oracle.json'\r\nimport character_descriptor from './Oracle Data/character-descriptor.oracle.json'\r\nimport character_goal from './Oracle Data/character-goal.oracle.json'\r\nimport character_role from './Oracle Data/character-role.oracle.json'\r\nimport coastal_waters_location from './Oracle Data/coastal-waters-location.oracle.json'\r\nimport combat_action from './Oracle Data/combat-action.oracle.json'\r\nimport elf_names from './Oracle Data/elf-names.oracle.json'\r\nimport ironlander_names_a from './Oracle Data/ironlander-names-a.oracle.json'\r\nimport ironlander_names_b from './Oracle Data/ironlander-names-b.oracle.json'\r\nimport location_descriptor from './Oracle Data/location-descriptor.oracle.json'\r\nimport location from './Oracle Data/location.oracle.json'\r\nimport major_plot_twist from './Oracle Data/major-plot-twist.oracle.json'\r\nimport mystic_backlash from './Oracle Data/mystic-backlash.oracle.json'\r\nimport region from './Oracle Data/region.oracle.json'\r\nimport settlement_trouble from './Oracle Data/settlement-trouble.oracle.json'\r\nimport theme from './Oracle Data/theme.oracle.json'\r\n\r\nconst OraclesIndex = [\r\n  action,\r\n  challenge_rank,\r\n  character_descriptor,\r\n  character_goal,\r\n  character_role,\r\n  coastal_waters_location,\r\n  combat_action,\r\n  elf_names,\r\n  ironlander_names_a,\r\n  ironlander_names_b,\r\n  location_descriptor,\r\n  location,\r\n  major_plot_twist,\r\n  mystic_backlash,\r\n  region,\r\n  settlement_trouble,\r\n  theme,\r\n]\r\n\r\nexport default OraclesIndex","import * as React from 'react';\r\n\r\ninterface IProps {\r\n  name?: string;\r\n}\r\n\r\nconst Header: React.FC<IProps> = (props: IProps) => (\r\n  <div>\r\n    <h1>Greetings, {props.name}!</h1>\r\n    <h2>I am the Oracle.</h2>\r\n  </div>\r\n);\r\n\r\nHeader.defaultProps = {\r\n  name: 'Ironsworn',\r\n};\r\n\r\nexport default Header;","import * as React from 'react';\r\nimport { Header } from '..';\r\n\r\n// interface IProps {\r\n//   name?: string;\r\n// }\r\n\r\n// const Home: React.FC<IProps> = (props: IProps) => (\r\nconst Home: React.FC = () => (\r\n  <div>\r\n    <Header></Header>\r\n    <p>ask...</p>\r\n  </div>\r\n);\r\n\r\nexport default Home;","// interface String {\r\n//   toTitleCase(): string;\r\n// }\r\n\r\n// String.prototype.toTitleCase = function (): string {\r\n//   return this.toLowerCase().replace(/\\b[a-z]/g, (match) => match.toLocaleUpperCase());\r\n// }\r\n\r\nconst toTitleCase = function(s: string): string {\r\n  return s.toLowerCase().replace(/\\b[a-z]/g, (match) => match.toLocaleUpperCase());\r\n}\r\n\r\nconst formatOracleTitle = function(title: string): string {\r\n  return toTitleCase(title.slice(title.lastIndexOf(':') + 1).trim());\r\n}\r\n\r\nexport default {\r\n  toTitleCase,\r\n  formatOracleTitle\r\n}","const randomInt = function(min: number, max: number): number {\r\n  // FIXME: not properly rounded\r\n  return Math.round(Math.random() * (max - min) + min);\r\n}\r\n\r\nconst roll = function(sides: number): number {\r\n  return randomInt(1, sides);\r\n}\r\n\r\nconst Dice = {\r\n  roll\r\n}\r\n\r\nexport default Dice;","import { IOracle } from \"../../../store/Store\";\r\nimport Dice from \"../../../modules/dice/dice\";\r\n\r\nconst roll = function (oracle: IOracle): number {\r\n  // FIXME: use oracle range\r\n  return Dice.roll(oracleMax(oracle));\r\n}\r\n\r\nconst rollResult = function (oracle: IOracle): string {\r\n  const value = roll(oracle);\r\n  return oracle.table.find((item) => checkRange(value, item.roll))?.result ?? 'NOPE';\r\n}\r\n\r\nconst checkRange = function (roll: number, range: string): boolean {\r\n  const min = rangeMin(range);\r\n  const max = rangeMax(range);\r\n  // console.log('checkRange:', min, '<=', roll, '<=', max);\r\n  return min <= roll && roll <= max;\r\n  // return range.includes(roll);\r\n}\r\n\r\nconst rangeMin = function (range: string): number {\r\n  const regex = /^[0-9]+/;\r\n  const match = range.match(regex)?.pop()\r\n  if (match === undefined) {\r\n    throw new Error('no minimum in range ' + range);\r\n  }\r\n  return parseInt(match);\r\n}\r\n\r\nconst rangeMax = function (range: string): number {\r\n  const regex = /[0-9]+$/;\r\n  const match = range.match(regex)?.pop()\r\n  if (match === undefined) {\r\n    throw new Error('no minimum in range ' + range);\r\n  }\r\n  if (match === '00') {\r\n    return 100;\r\n  }\r\n  return parseInt(match);\r\n}\r\n\r\nconst oracleMax = function (oracle: IOracle): number { // { min: number, max: number } {\r\n  const max = rangeMax(oracle.table[oracle.table.length - 1].roll)\r\n  // console.log('oracleMax:', max);\r\n  return max;\r\n  // return {\r\n  //   min: rangeMin(oracle.table[0].roll),\r\n  //   max: rangeMax(oracle.table[oracle.table.length - 1].roll),\r\n  // }\r\n}\r\n\r\nconst RollTableUtils = {\r\n  rollResult\r\n}\r\n\r\nexport default RollTableUtils","import * as React from 'react';\r\nimport { misc as MiscUtils } from \"../../utils/\";\r\nimport { IOracle } from '../../store/Store';\r\nimport RollTableUtils from \"./utils/roll-table\";\r\nimport './Oracle.css';\r\n\r\ninterface IProps {\r\n  oracle: IOracle\r\n}\r\n\r\ninterface IState {\r\n  result?: string;\r\n}\r\n\r\nclass Oracle extends React.Component<IProps, IState> {\r\n  public static defaultProps: Partial<IProps> = {\r\n    oracle: undefined\r\n  };\r\n\r\n  public state: IState = {\r\n    result: undefined\r\n  };\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    // Don't call this.setState() here!\r\n    this.state = { result: RollTableUtils.rollResult(this.props.oracle) };\r\n\r\n    this.roll = this.roll.bind(this);\r\n  }\r\n\r\n  public roll(): void {\r\n    this.setState({ result: RollTableUtils.rollResult(this.props.oracle)})\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <li className=\"Oracle\" onClick={this.roll}>\r\n        {MiscUtils.formatOracleTitle(this.props.oracle.title)}\r\n        {/* <ul>{this.props.oracle.table.map((item) => <li>{item.roll}: {item.result}</li>)}</ul> */}\r\n        : {this.state.result}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Oracle;","import * as React from 'react';\r\nimport { IOracle } from '../../store/Store';\r\nimport { Oracle } from '../';\r\n\r\ninterface IProps {\r\n  countBy?: number;\r\n  // oracles: string[];\r\n  oracles: IOracle[]\r\n}\r\n\r\ninterface IState {\r\n  count: number;\r\n  items: string[];\r\n}\r\n\r\nclass OracleList extends React.Component<IProps, IState> {\r\n  public static defaultProps: Partial<IProps> = {\r\n    countBy: 1,\r\n    oracles: []\r\n  };\r\n\r\n  public state: IState = {\r\n    count: 0,\r\n    items: [\r\n      'A',\r\n      'B',\r\n      'C',\r\n      'D',\r\n      'E',\r\n    ]\r\n  };\r\n\r\n  renderListItem(item: string) {\r\n    return (\r\n      <li>Item {item}</li>\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ul>\r\n        {this.props.oracles.map((oracle) => <Oracle oracle={oracle}></Oracle>)}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OracleList;","import React from 'react';\r\nimport logo from '../../images/logo.svg';\r\nimport './App.css';\r\nimport Store from '../../store/Store';\r\nimport { Home, OracleList } from '..';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\r\n\t\t\t{/* <header className=\"App-header\">\r\n\t\t\t\t<Header name=\"Ironsworn\" />\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t</header> */}\r\n\r\n\t\t\t<div className=\"App-content\">\r\n\r\n\r\n\t\t\t\t<Home/>\r\n\t\t\t\t<OracleList oracles={Store.oracles}/>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}